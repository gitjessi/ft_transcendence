

Qu’est-ce que bcrypt ?

bcrypt est un algorithme de hachage conçu spécialement pour sécuriser les mots de passe.
Contrairement à un hachage classique (comme SHA-256 ou MD5), bcrypt est lent et adaptable :
-> il est volontairement gourmand en ressources pour compliquer les attaques par force brute.

Comment est t-il constitue :
Le sel (salt) -> permet de rajouter des chiffes apres le mot de pass afin de differencier de mot de passe identique
Le facteur de coût (work factor / cost) -> Ce coût définit combien de fois l’algorithme applique des itérations de hachage.
Plus le coût est élevé, plus le calcul prend du temps → plus difficile pour un attaquant de tester beaucoup de mots de passe rapidement.

Vérification d’un mot de passe :
Lorsqu’un utilisateur se connecte, on prend le mot de passe fourni, on applique bcrypt avec le même sel et coût stockés, puis on compare les résultats.
Si ça correspond, c’est validé.



C’est quoi un JWT ?
Un JWT est comme une chaîne de texte composée de 3 parties séparées par des points : HEADER.PAYLOAD.SIGNATURE
Header (en-tête) : dit quel type de token c’est et l’algorithme pour le sécuriser.
Payload (données) : contient des infos sur toi ou tes droits (ex : ton ID, ton rôle).
Signature : une sorte de scellement qui empêche quelqu’un de tricher avec ton token.
Important : la signature empêche de modifier les infos, mais le contenu est lisible par tout le monde. Donc pas de mots de passe ou données secrètes dedans.

Mise en situation :

Connexion
L’utilisateur envoie son mot de passe au serveur pour se connecter.
Le serveur vérifie que le mot de passe est correct. 

Création du token (le pass)

Si le mot de passe est correct, le serveur crée un JWT.
Ce token contient :
- l’ID de l’utilisateur
- ses droits ou rôle (ex : admin, utilisateur)
- une date d’expiration
Le serveur signe le token pour que personne ne puisse le modifier.

Le serveur renvoie ce token au navigateur ou à l’application cliente. function bla() {}  let bla = () => {}
Le client le garde quelque part (ex : cookie sécurisé ou localStorage).

Utilisation du token

Quand le client veut accéder à un site ou à une API :
Il envoie le token au serveur dans l’en-tête de la requête, par exemple :

Authorization: Bearer <token>

Le serveur vérifie la signature du token :
Si la signature est valide et que le token n’est pas expiré → accès autorisé
Sinon → accès refusé.




C’est quoi le 2FA ?

2FA (ou authentification à deux facteurs) signifie que pour te connecter à un compte, il faut deux preuves d’identité différentes au lieu d’une seule.
Facteur 1 : quelque chose que tu sais → mot de passe ou PIN.
Facteur 2 : quelque chose que tu possèdes ou quelque chose que tu es → smartphone, clé physique, empreinte digitale, ou code reçu par SMS/email.
Résultat : même si quelqu’un vole ton mot de passe, il ne peut pas se connecter sans le deuxième facteur.

Comment ça marche en pratique

Tu entres ton mot de passe (facteur 1).
Le serveur te demande un code supplémentaire (facteur 2) :
Ex. un code à 6 chiffres généré par ton appli 2FA ou reçu par SMS.
Tu saisis ce code → le serveur vérifie qu’il est correct.
Si tout est correct, tu es connecté.